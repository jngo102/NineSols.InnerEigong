name: Build and Release

on:
  push:
    branches: [main]
  pull_request:

env:
  ARTIFACT_NAME: build-artifact

jobs:
  setup_release:
    name: Setup release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      mod_name: ${{ steps.get_mod_name.outputs.mod_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get C# project file
        id: get_project_file
        run: echo "csproj=$(find . -iname *.csproj | head -1)" >> $GITHUB_OUTPUT  

      - name: Get mod name
        id: get_mod_name
        run: |
          tag=AssemblyName
          mod_name=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "mod_name=$mod_name" >> $GITHUB_OUTPUT 

      - name: Get assembly version
        id: get_version
        run: |
          tag=Version
          version=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get recent Change Log
        id: get_changelog
        run: |
          query_regex="^## \[[0-9]*\.[0-9]*\.[0-9]*\] - [0-9]{4}-[0-9]{2}-[0-9]{2}$"
          cmd_output=$(grep --only-matching --perl-regexp "$query_regex" ChangeLog.md)
          echo "$(echo "$cmd_output" | head -2)" > temp.txt
          start=$(cat temp.txt | head -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          end=$(cat temp.txt | tail -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          body=$(awk "/$start/,/$end/ { print }" ChangeLog.md | head -n -1)
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.get_changelog.outputs.body }}
          draft: false
          prerelease: false
  build_and_publish:
    name: Build and Publish
    needs: setup_release
    strategy:
      matrix:
        target: [
          { name: macos, runtime: osx, suffix: OSX },
          { name: win, runtime: win, suffix: Windows },
        ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download references
        run: |
          wget ${{ secrets.REFERENCES_LINK }} -O References.zip
          unzip References.zip -d References

      - name: Download BepInEx
        run: |
          DOWNLOAD_URL=$(curl --request GET https://api.github.com/repos/BepInEx/BepInEx/releases/latest | jq -r '.assets[] | select(.name | contains("${{ matrix.target.name }}_x64")) | .browser_download_url')
          wget $DOWNLOAD_URL -O BepInEx.zip
          unzip BepInEx.zip -d BepInEx

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      - name: Restore packages
        run: dotnet restore

      - name: Build project
        run: dotnet publish --configuration Release --runtime ${{ matrix.target.runtime }}-x64

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ needs.setup_release.outputs.mod_name }}_${{ matrix.target.suffix }}.zip
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ matrix.target.suffix }}.zip
          asset_content_type: application/zip
